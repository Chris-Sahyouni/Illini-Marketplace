//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="sqlserver"
    url=env("DATABASE_URL")
    shadowDatabaseUrl=env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id String @id() @default(cuid())
    username String @unique()
    password String
    email String @unique()
    isVerified Boolean @default(false)
    joinedDate DateTime @default(now())
    isAdmin Boolean @default(false)
    contact String?
    SubleaseSelling Sublease[]
    TicketSelling Ticket[]
    TransitSelling Transit[]
    TextooksSelling Textbook[]
    ParkingSelling Parking[]
}

model Sublease {
    location String
    image2 Bytes?
    image3 Bytes?
    image4 Bytes?
    company String
    bedrooms Int
    bathrooms Int
    start DateTime
    end DateTime
    term String
    id String @id() @default(cuid())
    price Float
    name String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
}

model Transit {
    from String
    to String
    mode String
    date DateTime
    id String @id() @default(cuid())
    price Float
    name String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
}

model Ticket {
    type String
    event String
    date DateTime
    seat String?
    id String @id() @default(cuid())
    price Float
    name String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
}

model Textbook {
    course String
    id String @id() @default(cuid())
    price Float
    name String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
}

model Parking {
    location String
    start DateTime
    end DateTime?
    id String @id() @default(cuid())
    price Float
    name String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
}

model bannedEmail {
    email String @unique()
}