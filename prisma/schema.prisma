//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="sqlserver"
    url=env("DATABASE_URL")
    shadowDatabaseUrl=env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id String @id() @default(cuid())
    username String @unique()
    password String
    email String @unique()
    isVerified Boolean @default(false)
    joinedDate DateTime @default(now())
    isAdmin Boolean @default(false)
    contact String?
    SubleaseSelling Sublease[]
    SportsTicketSelling SportsTicket[]
    TransitTicketSelling TransitTicket[]
    TextooksSelling Textbook[]
    ParkingSelling Parking[]
    MiscSelling Misc[]
}

model Sublease {
    address String
    image2 Bytes?
    image3 Bytes?
    image4 Bytes?
    company String
    numBedrooms Int
    numBathrooms Int
    startDate DateTime
    endDate DateTime
    isSublease Boolean @default(true)
    id String @id() @default(cuid())
    price Float
    name String
    description String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
    tags String?
}

model SportsTicket {
    game String
    location String
    date DateTime
    numTix Int
    sport String
    isSportsTicket Boolean @default(true)
    id String @id() @default(cuid())
    price Float
    name String
    description String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
    tags String?
}

model TransitTicket {
    dateTime DateTime
    mode String
    from String
    to String
    isTransitTicket Boolean @default(true)
    id String @id() @default(cuid())
    price Float
    name String
    description String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
    tags String?
}

model Textbook {
    course String
    isTextbook Boolean @default(true)
    id String @id() @default(cuid())
    price Float
    name String
    description String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
    tags String?
}

model Parking {
    location String
    startDate DateTime
    endDate DateTime?
    isParking Boolean @default(true)
    id String @id() @default(cuid())
    price Float
    name String
    description String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
    tags String?
}

model Misc {
    fields String?
    isMisc Boolean @default(true)
    id String @id() @default(cuid())
    price Float
    name String
    description String?
    notes String?
    contact String
    image Bytes?
    seller User @relation(fields: [sellerId], references: [id])
    sellerId String
    createdAt DateTime @default(now())
    tags String?
}

model bannedEmail {
    email String @unique()
}